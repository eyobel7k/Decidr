{"version":3,"sources":["Components/AddItem.js","Components/DisplayList.js","App.js","reportWebVitals.js","index.js"],"names":["AddItem","listContainer","setListContainer","selectedItem","setCount","count","useState","newItem","setNewItem","formSubmit","event","preventDefault","cleanedInput","trim","toLowerCase","alert","find","length","className","onSubmit","id","value","onChange","target","placeholder","onClick","DisplayList","completeTask","setSelectedItem","map","item","index","App","errorWarning","itemWarning","setItemWarning","copyOfArray","splice","random","Math","floor","selectItem","type","clearAll","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.214026fe.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function AddItem({\n  listContainer,\n  setListContainer,\n  selectedItem,\n  setCount,\n  count,\n}) {\n  const [newItem, setNewItem] = useState(\"\");\n\n  const formSubmit = (event) => {\n    event.preventDefault();\n    setCount(count + 1);\n    setNewItem(\"\");\n    const cleanedInput = newItem.trim().toLowerCase();\n    if (newItem === \"\") {\n      alert(\"Please enter an item!\");\n      setCount(count)\n    } else if (\n      listContainer.find(\n        (setListContainer) => setListContainer === cleanedInput\n      )\n    ) {\n      alert(\"duplicate entry, please enter a new item\");\n      setCount(count );\n    } else if (cleanedInput.length > 0) {\n      setListContainer([...listContainer, newItem.trim()]);\n    }\n    \n  };\n\n  return (\n    <div className='Add'>\n      Choose from: <span>{count} </span>items\n      <form onSubmit={formSubmit} id=\"add-item\">\n        <input\n          id=\"add-item\"\n          value={newItem}\n          onChange={(event) => setNewItem(event.target.value)}\n          placeholder=\"Add an item\"\n        />\n        {selectedItem}\n        <button id=\"submit-item\" onClick={formSubmit} >\n          Add \n        </button>\n      </form>\n    </div>\n  );\n}\n","function DisplayList({\n  listContainer,\n  setListContainer,\n  setSelectedItem,\n  selectedItem,\n  setCount,\n  count,\n  completeTask,\n  newItem,\n  setNewItem\n}) {\n  const DisplayList = listContainer.map((item, index) => (\n\n    <li key={index} className=\"borderRed\">\n      <div className=\"item\">\n        {index + 1}. {item}\n        <button\n          onClick={() => {\n            completeTask(index);\n          }}\n        >\n          del\n        </button>\n      </div>\n    </li>\n  ));\n  return (\n    <div className=\"scroll\">\n      <ol id=\"display-list\">{DisplayList}</ol>\n    </div>\n  );\n}\nexport default DisplayList;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport AddItem from \"./Components/AddItem\";\nimport DisplayList from \"./Components/DisplayList\";\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Petemoss&display=swap');\n</style>;\n\nfunction App() {\n  const [listContainer, setListContainer] = useState([]);\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [errorWarning, setErrorWarning] = useState(\" Add At Least Two Items\");\n  const [itemWarning, setItemWarning] = useState(\"Add At Least Two Items\");\n\n  const selectItem = () => {\n    const random = Math.floor(Math.random() * listContainer.length);\n    setSelectedItem(\n      listContainer.length > 1 ? listContainer[random] : errorWarning\n    );\n\n    setItemWarning(\"\");\n  };\n\n  const completeTask = (index) => {\n    let copyOfArray = [...listContainer];\n    copyOfArray.splice(index, 1);\n    setListContainer(copyOfArray);\n    setCount(count - 1);\n  };\n  const clearAll = (index) => {\n    let copyOfArray = [...listContainer];\n    copyOfArray.splice(index);\n    setListContainer(copyOfArray);\n    setSelectedItem(\"\");\n    setCount(0);\n    setItemWarning(errorWarning);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>DECIDR</h1>\n      </header>\n\n      <AddItem\n        listContainer={listContainer}\n        setListContainer={setListContainer}\n        completeTask={completeTask}\n        setCount={setCount}\n        count={count}\n      />\n\n      <main>\n        {listContainer.length < 2 && (\n          <div className=\"item-warning\">{itemWarning}</div>\n        )}\n\n        {selectedItem.length > 0 ? (\n          <p id=\"selected\"> {selectedItem} </p>\n        ) : (\n          <DisplayList\n            listContainer={listContainer}\n            setListContainer={setListContainer}\n            selectedItem={selectedItem}\n            setSelectedItem={setSelectedItem}\n            setCount={setCount}\n            completeTask={completeTask}\n          />\n        )}\n      </main>\n      <footer>\n        <div className=\"btn\">\n          <button id=\"btn-select\" onClick={() => selectItem()} type=\"text\">\n            Selected Item\n          </button>\n          <button onClick={() => clearAll()} type=\"text\">\n            Clear All\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}